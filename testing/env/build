#! /bin/bash
#
# Usage:
#  build INC_FILE
#
# PARAMETERS:
#  INC_FILE  The absolute path to a file including the build time environment
#            variables. See README.md for details.
#
# Builds the five docker images with the provided configuration values.


if [[ "$OSTYPE" == "darwin"* ]]
then
  readonly ExecName=$(greadlink -f "$0")
else
  readonly ExecName=$(readlink --canonicalize "$0")
fi

main()
{
  local cfg="$*"

  local baseDir
  baseDir=$(dirname "$ExecName")

  if [ -z "$cfg" ]
  then
    printf 'An environment variable include file is needed.\n' >&2
    return 1
  fi

  if ! [[ "$cfg" =~ ^/ ]]
  then
    cfg="$(pwd)"/"$cfg"
  fi

  # shellcheck disable=SC1090
  . "$cfg"

  if [[ ! -e ~/.rnd ]]
  then
    openssl rand -writerand ~/.rnd
    trap 'rm --force ~/.rnd' EXIT
  fi

  mk_certs "$baseDir"

  docker build --file "$baseDir"/base/Dockerfile.centos6 --tag test-env-base:centos6 "$baseDir"
  docker build --file "$baseDir"/base/Dockerfile.centos7 --tag test-env-base:centos7 "$baseDir"
  docker-compose --file "$baseDir"/docker-compose.yml --project-name "$ENV_NAME" build
}


mk_certs()
{
  local baseDir="$1"

  local name
  for name in default custom
  do
    local key="$baseDir"/."$name".key
    local crt="$baseDir"/."$name".crt

    if [[ ! -e "$key" ]]
    then
      if ! openssl genpkey -algorithm rsa -out "$key" 2> /dev/null
      then
        printf 'failed to generate TLS key %s\n' "$key" >&2
        return 1
      fi
    fi

    if [[ ! -e "$crt" ]]
    then
      openssl req -batch -new -x509 -days 10000 -key "$key" -out "$crt"
    fi
  done
}


set -e

main "$*"
