#! /bin/bash
#
# Usage:
#  build INC_FILE
#
# PARAMETERS:
#  INC_FILE  The absolute path to a file including the build time environment
#            variables. See README.md for details.
#
# Builds the five docker images with the provided configuration values.

set -o errexit -o nounset -o pipefail

export DOMAIN


resolve_exec()
{
  local exe="$0"

  if [[ "$OSTYPE" == "darwin"* ]]
  then
    greadlink -f "$exe"
  else
    readlink --canonicalize "$exe"
  fi
}


main()
{
  local cfg="$1"

  local execName
  execName=$(resolve_exec "$0")

  local baseDir
  baseDir=$(dirname "$execName")

  if [[ -z "$cfg" ]]
  then
    printf 'An environment variable include file is needed.\n' >&2
    return 1
  fi

  if ! [[ "$cfg" =~ ^/ ]]
  then
    cfg="$(pwd)"/"$cfg"
  fi

  # shellcheck disable=SC1090
  . "$cfg"

  mk_cert_forms "$baseDir"/.tls "$DOMAIN"
  mk_cert_forms "$baseDir"/.tls custom

  docker build --file "$baseDir"/base/Dockerfile.centos6 --tag test-env-base:centos6 "$baseDir"
  docker build --file "$baseDir"/base/Dockerfile.centos7 --tag test-env-base:centos7 "$baseDir"
  docker-compose --file "$baseDir"/docker-compose.yml --project-name "$ENV_NAME" build
}


mk_cert_forms()
{
  local workDir="$1"
  local domain="$2"

  local domainKey="$workDir"/private/"$domain".key
  local domainCrt="$workDir"/certs/"$domain".crt
  local rootCrt="$workDir"/certs/root.crt
  local chainCrt="$workDir"/certs/"$domain"-chain.crt
  local pem="$workDir"/private/"$domain".pem

  if [[ "$domainCrt" -nt "$chainCrt" ]] || [[ "$rootCrt" -nt "$chainCrt" ]]
  then
    cat "$domainCrt" "$rootCrt" > "$chainCrt"
    printf 'Created certificate chain for %s domain\n' "$domain"
  fi

  chmod a=r "$chainCrt"

  if [[ "$domainKey" -nt "$pem" ]] || [[ "$chainCrt" -nt "$pem" ]]
  then
    cat "$domainKey" "$chainCrt" > "$pem"
    printf 'Created PEM for %s domain\n' "$domain"
  fi

  chmod a=r "$pem"
}


main "$@"
