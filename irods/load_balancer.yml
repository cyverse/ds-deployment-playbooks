---
- name: install HAPRoxy
  hosts: load_balancer
  become: true
  vars:
    ies: "{{ groups['ies'][0] }}"
    ies_server: "{{ ies | regex_replace('\\..*') }}"
    ies_ip: "{{ ies if ies|ipaddr else lookup('dig', ies) }}"
    ies_maxconn: maxconn {{ _load_balancer_irods_max_conn }}
    ies_check_periods: inter {{ _load_balancer_irods_check_period }}s downinter 5s fastinter 2s
    ies_check: check port 1247 fall 2 {{ ies_check_periods }}
    ies_server_cfg: "{{ ies_ip }} {{ ies_maxconn }} {{ ies_check }}"
    reconn_ports_end: "{{ hostvars[ies]._irods_server_port_range_end }}"
    reconn_ports_start: "{{ hostvars[ies]._irods_server_port_range_start }}"
    webdav_ip: "{%
      if groups.webdav[0] | ipaddr %}{{
        groups.webdav[0] }}{%
      else %}{{
        lookup('dig', groups.webdav[0]) }}{% endif %}"
    webdav_check_periods: inter {{ _load_balancer_webdav_check_period }}s downinter 3s fastinter 1s
    webdav_check: check port 80 fall 2 {{ webdav_check_periods }}
    webdav_server_cfg: "{{ webdav_ip }} maxconn 300 {{ webdav_check }}"
  tasks:
    - name: enable notifcations when not testing
      set_fact:
        notifications_enabled: true
      tags:
        - no_testing

    - name: install stats TLS key and certificate
      when: _tls_key != ''
      copy:
        content: "{{ _tls_key }}{{ _tls_cert }}{{ _tls_intermediate_certs }}"
        dest: "{{ _load_balancer_stats_certificate }}"

    - name: ensure /etc/haproxy/certs gone
      file:
        path: /etc/haproxy/certs
        state: absent

    - name: configure rsyslog to listen on UDP socket
      blockinfile:
        path: /etc/rsyslog.conf
        insertafter: '# Provides UDP syslog reception'
        marker: "# {mark} DS MANAGED BLOCK (load_balancer)"
        block: |
          $ModLoad imudp
          $UDPServerRun 514
          $UDPServerAddress 127.0.0.1
      notify:
        - restart syslog

    - name: place rsyslog config for HAProxy
      copy:
        src: files/rsyslog.d/haproxy.conf
        dest: /etc/rsyslog.d
      notify:
        - restart syslog

    - name: place logrotate config for HAProxy
      copy:
        src: files/logrotate.d/haproxy
        dest: /etc/logrotate.d

    - name: ensure CentOS 7 stock HAProxy is not installed
      package:
        name: haproxy
        state: absent

    - name: ensure Software Collections repository is installed
      package:
        name: centos-release-scl

    - name: ensure HAProxy version 1.8 is installed
      package:
        name: "{{ item }}"
      with_items:
        - rh-haproxy18-haproxy
        - rh-haproxy18-haproxy-syspaths

    - name: ensure /usr/sbin/haproxy points to the haproxy exec
      file:
        src: /opt/rh/rh-haproxy18/root/usr/sbin/haproxy
        dest: /usr/sbin/haproxy
        state: link

    - name: ensure /etc/haproxy exists
      file:
        path: /etc/haproxy
        state: directory

    - name: ensure /etc/opt/rh/rh-haproxy18/haproxy/haproxy.cfg points to cfg
      file:
        src: /etc/haproxy/haproxy.cfg
        dest: /etc/opt/rh/rh-haproxy18/haproxy/haproxy.cfg
        state: link
        follow: false
        force: true

    - name: ensure HAProxy starts on reboot
      service:
        name: haproxy
        enabled: true
      tags:
        - no_testing

    - name: install VIP list
      template:
        src: templates/vip.lst.j2
        dest: /etc/haproxy/vip.lst
      notify:
        - reload haproxy
      tags:
        - no_testing

    - include_role:
        name: uoi-io.haproxy
        tasks_from: config.yml
      vars:
        haproxy_global_cpu_maps:
          - 1 0
        haproxy_global_nbproc: 1
        haproxy_global_stats:
          - socket /var/run/haproxy.sock mode 600 level admin
          - timeout 2m
        haproxy_global_tunes:
          - spread-checks: 2
          - tune.ssl.default-dh-param: 2048
          - unix-bind: prefix /var/lib/haproxy/ mode 770 user haproxy
        haproxy_default_errorfiles: []
        haproxy_default_mode: tcp
        haproxy_default_options:
          - dontlognull
          - log-separate-errors
          - tcpka
          - tcplog
        haproxy_default_timeouts:
          - connect 10s
          - client 1d
          - queue {{ _load_balancer_queue_timeout }}s
          - server 1d

# client-fin needs to be less than conntrack's TCP FIN_WAIT timeout, usually 2m.
          - client-fin 1m

        haproxy_stats: true
        haproxy_stats_address: '*'

# XXX - As of  uoi-io/ansible-haproxy version
# 2d0213a2c5b3ef10d2e4abea9ac29e19611e0090 (2017/06/06), there is no support for
# having the stats endpoint use HTTPS. This hack works around this limitation.
        haproxy_stats_port: "{{ _load_balancer_stats_port }} ssl crt {{ _load_balancer_stats_certificate }}"

        haproxy_stats_user: "{{ _load_balancer_stats_user }}"
        haproxy_stats_password: "{{ _load_balancer_stats_password }}"
        haproxy_stats_uri: /
        haproxy_stats_options:
          - refresh 10s
          - show-legends
          - hide-version
        haproxy_frontend:
          - irods_main:
              binds:
                - :{{ _canonical_irods_port }}
              stick_table: type ip size 100k store conn_cur
              acls:
                - is-conn capture.req.hdr(0) -m str RODS_CONNECT
                - too-many-conn sc1_conn_cur gt 1
                - vip-src src -f /etc/haproxy/vip.lst
              tcp_requests:
                - inspect-delay 5s
                - content capture req.payload_lv(0,4),regsub(^\s*<MsgHeader_PI\s*>[\s\S]*<type\s*>,),regsub(</type\s*>[\s\S]*</MsgHeader_PI\s*>\s*$,) len 16
                - content reject unless is-conn
                - content track-sc1 src if !vip-src
              use_backends:
                - irods_throttled if too-many-conn
              default_backend: irods_direct
          - irods_reconn:
              binds:
                - :{{ reconn_ports_start }}-{{ reconn_ports_end }}
              default_backend: irods_direct
          - irods_indirect:
              binds:
                - unix@haproxy_irods.sock accept-proxy
              default_backend: irods_direct
        haproxy_backend:
          - irods_direct:
              options:
                - tcp-check
              servers:
                - "{{ ies_server }} {{ ies_server_cfg }}"
              tcp_checks:
                - connect
                - send-binary 0000006e
                - send <MsgHeader_PI><type>RODS_CONNECT</type><msgLen>223</msgLen><errorLen></errorLen><bsLen></bsLen></MsgHeader_PI><StartupPack_PI><proxyUser>PING</proxyUser><proxyRcatZone></proxyRcatZone><clientUser></clientUser><clientRcatZone></clientRcatZone><relVersion></relVersion><apiVersion></apiVersion><option>haproxy</option></StartupPack_PI>
                - 'expect string <MsgHeader_PI>\n<type>RODS_VERSION</type>'
                - send-binary 0000006f
                - send <MsgHeader_PI><type>RODS_DISCONNECT</type><msgLen>0</msgLen><errorLen></errorLen><bsLen></bsLen></MsgHeader_PI>
          - irods_throttled:
              servers:
                - indirect unix@haproxy_irods.sock send-proxy maxconn {{ _load_balancer_irods_extra_max_conn }}
        haproxy_listen:
          - webdav:
              binds:
                - :80
                - :443
              options:
                - httpchk
# XXX: Our caching is too dumb right now to support multiple webdav servers
              servers:
                - dav-1 {{ webdav_server_cfg }}
#              servers: "[
#                {% for h in groups.webdav %}
#                  \"dav-{{ loop.index }} {% if h | ipaddr %}{{ h }}{% else %}{{ lookup('dig', h) }}{% endif %} check port 80 inter 20s\"
#                  {% if not loop.last %},{% endif %}
#                {% endfor %} ]"
      tags:
        - no_testing

    - import_role:
        name: uoi-io.haproxy
        tasks_from: sysctl.yml
      tags:
        - no_testing

    - name: ensure haproxy is started
      service:
        name: haproxy
        state: started
      tags:
        - no_testing

    - name: disable conntrack for proxied connections
      blockinfile:
        path: /etc/sysconfig/iptables
        marker: "# {mark} DS MANAGED BLOCK (load_balancer raw)"
        block: |
          *raw
          -A PREROUTING -s {{ _load_balancer_irods_allowed_src }} -p tcp --dport 80 -j NOTRACK
          -A OUTPUT -d {{ _load_balancer_irods_allowed_src }} -p tcp --sport 80 -j NOTRACK
          {% for w in groups.webdav %}
          {%   set addr = w if w|ipaddr else lookup('dig', w) %}
          -A PREROUTING -s {{ addr }} -p tcp --sport 80 -j NOTRACK
          -A OUTPUT -d {{ addr }} -p tcp --dport 80 -j NOTRACK
          {% endfor %}
          -A PREROUTING -s {{ _load_balancer_irods_allowed_src }} -p tcp --dport 443 -j NOTRACK
          -A OUTPUT -d {{ _load_balancer_irods_allowed_src }} -p tcp --sport 443 -j NOTRACK
          {% for w in groups.webdav %}
          {%   set addr = w if w|ipaddr else lookup('dig', w) %}
          -A PREROUTING -s {{ addr }} -p tcp --sport 443 -j NOTRACK
          -A OUTPUT -d {{ addr }} -p tcp --dport 443 -j NOTRACK
          {% endfor %}
          -A PREROUTING -s {{ _load_balancer_irods_allowed_src }} -p tcp --dport {{ _canonical_irods_port }} -j NOTRACK
          -A OUTPUT -d {{ _load_balancer_irods_allowed_src }} -p tcp --sport {{ _canonical_irods_port }} -j NOTRACK
          -A PREROUTING -s {{ ies_ip }} -p tcp --sport {{ _irods_zone_port }} -j NOTRACK
          -A OUTPUT -d {{ ies_ip }} -p tcp --dport {{ _irods_zone_port }} -j NOTRACK
          -A PREROUTING -s {{ _load_balancer_irods_allowed_src }} -p tcp --dport {{ reconn_ports_start }}:{{ reconn_ports_end }} -j NOTRACK
          -A OUTPUT -d {{ _load_balancer_irods_allowed_src }} -p tcp --sport {{ reconn_ports_start }}:{{ reconn_ports_end }} -j NOTRACK
          -A PREROUTING -s {{ ies_ip }} -p tcp --sport {{ reconn_ports_start }}:{{ reconn_ports_end }} -j NOTRACK
          -A OUTPUT -d {{ ies_ip }} -p tcp --dport {{ reconn_ports_start }}:{{ reconn_ports_end }} -j NOTRACK
          COMMIT
      notify:
        - restart firewall

    - name: open firewall for relevant connections
      blockinfile:
        path: /etc/sysconfig/iptables
        insertbefore: -A INPUT -j REJECT
        marker: "# {mark} DS MANAGED BLOCK (load_balancer filter)"
        block: |
          -A INPUT -m state --state UNTRACKED -j ACCEPT
          -A INPUT -m state --state NEW -s {{ _load_balancer_stats_allowed_src }} -p tcp --dport {{ _load_balancer_stats_port }} -j ACCEPT
      notify:
        - restart firewall

  handlers:
    - name: restart firewall
      when: notifications_enabled | default(false)
      service:
        name: iptables
        state: restarted

    - name: restart syslog
      when: notifications_enabled | default(false)
      service:
        name: rsyslog
        state: restarted
