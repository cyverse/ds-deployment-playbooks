---
- name: Install and configure apache
  hosts: webdav
  become: true
  roles:
    - role: geerlingguy.apache
      vars:
        apache_ssl_cipher_suite: "HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA"
        apache_global_vhost_settings: |
          <IfModule !log_forensic_module>
            LoadModule log_forensic_module modules/mod_log_forensic.so
          </IfModule>

          <IfModule !proxy_html_module>
            LoadModule proxy_html_module modules/mod_proxy_html.so
          </IfModule>

          <IfModule !sed_module>
            LoadModule sed_module modules/mod_sed.so
          </IfModule>

          <IfModule !unique_id_module>
            LoadModule unique_id_module modules/mod_unique_id.so
          </IfModule>

          <IfModule mpm_worker_module>
            ServerLimit             {{ _webdav_server_limit }}
            ThreadsPerChild         {{ _webdav_threads_per_child }}
            MaxRequestWorkers       {{ _webdav_max_request_workers }}
          </IfModule>

          QS_ErrorResponseCode 429
          
          ForensicLog logs/forensic_log
          ErrorLogFormat "%{cu}t %-L [pid %P] [%-m:%l] %-a %E: %M"

          Listen 443 https

          SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
          SSLRandomSeed connect builtin
          SSLRandomSeed startup file:/dev/urandom 256
          SSLSessionCache shmcb:/run/httpd/sslcache(512000)

          ProxyErrorOverride On
          ProxyHTMLEnable On
          ProxyHTMLLinks a href
          ProxyHTMLLinks base href
        apache_vhosts:
          - servername: "{{ _canonical_hostname }}"
            extra_parameters: |
              ServerAlias {{ inventory_hostname }}

              ErrorLog logs/http_error_log
              CustomLog logs/http_request_log {{ '"%{%Y-%m-%d %T}t.%{usec_frac}t %a \"%r\" %>s %L %{forensic-id}n"' }}
              LogLevel warn

              RedirectPermanent / https://{{ _canonical_hostname }}/
            comment: Redirect HTTP to HTTPS
          - servername: "{{ _canonical_hostname }}"
            listen_ip: 127.0.0.1
            extra_parameters: |
              QS_LocRequestLimit /dav {{ _webdav_davrods_access_limit }}
              
              ErrorLog logs/error_log
              CustomLog logs/access_log {{ '"%{%Y-%m-%d %T}t.%{usec_frac}t %{X-Forwarded-For}i \"%r\" %>s %L %{forensic-id}n"' }}
              LogLevel warn

              Header set Access-Control-Allow-Headers "Range"
              Header set Access-Control-Allow-Methods "GET, HEAD, OPTIONS"
              Header set Access-Control-Allow-Origin "*"

              UseCanonicalName On

              # Redirect dav-anon to dav
              <LocationMatch "/dav-anon/{{ _irods_zone_name }}/((commons/(community_released|cyverse_curated)|home|projects)(/.*)?)" >
                Require expr %{REQUEST_URI} !~ m#^/dav-anon/{{ _irods_zone_name }}/home(/[^/]*/?)?$#

                RequestHeader set Authorization "Basic {{ 'anonymous' | b64encode }}"

                ProxyPassMatch http://127.0.0.1/dav/{{ _irods_zone_name }}/$1 retry=0
                ProxyHTMLURLMap ^((http://)?[^/]*)/dav/ $1/dav-anon/ [R]

                <If "%{REQUEST_METHOD} == 'PROPFIND'">
                  SetOutputFilter Sed
                  OutputSed "s,/dav/,/dav-anon/,g"
                </If>

                Header edit Location ^(.*)/dav $1/dav-anon
              </LocationMatch>
            comment: The WebDAV host
            locations:
              - path: /dav/{{ _irods_zone_name }}/commons/community_released
                comment: Anonymous read-only access to the community released data
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  RedirectPermanent \
                    /dav/{{ _irods_zone_name }}/commons/community_released/commons_repo/curated \
                    /dav/{{ _irods_zone_name }}/commons/cyverse_curated

                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared', 'community-head.html') }}
              - path: /dav/{{ _irods_zone_name }}/commons/cyverse_curated
                comment: Anonymous read-only access to the data curated by CyVerse
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared/commons_repo/curated',
                             'curated-head.html') }}
              - path: /dav/{{ _irods_zone_name }}/home
                comment: Authenticated read-write access to the home collection
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  RedirectPermanent /dav/{{ _irods_zone_name }}/home/shared \
                                    /dav/{{ _irods_zone_name }}/projects

                  {{ davrods('Home', 'home-head.html',
                       [ 'expr %{REQUEST_URI} !~ m#^/dav/' ~ _irods_zone_name ~ '/home(/[^/]*/?)?$# || %{REMOTE_USER} != "anonymous"',
                         'valid-user' ]) }}
              - path: /dav/{{ _irods_zone_name }}/projects
                comment: Authenticated read-write access to the project folders
                extra_parameters: |
                  {% from 'davrods.j2' import davrods with context %}
                  {{ davrods('/' ~ _irods_zone_name ~ '/home/shared', 'projects-head.html',
                       [ 'valid-user' ]) }}
              - path: /server-status
                comment: Service status monitoring
                extra_parameters: |
                    SetHandler server-status
                    Require host localhost
              - path: /server-qos
                comment: Service QOS monitoring
                extra_parameters: |
                    SetHandler qos-viewer
                    Require host localhost
        
        apache_vhosts_ssl:
          - servername: "{{ _canonical_hostname }}"
            certificate_file: "{{ _webdav_tls_cert_file }}"
            certificate_key_file: "{{ _webdav_tls_key_file }}"
            certificate_chain_file: "{{ _webdav_tls_chain_file }}"
            extra_parameters: |
              ServerAlias {{ inventory_hostname }}

              QS_LocRequestLimit /dav {{ _webdav_access_limit }}

              ErrorLog logs/https_error_log
              CustomLog logs/https_request_log {{ '"%{%Y-%m-%d %T}t.%{usec_frac}t %{SSL_PROTOCOL}x %{SSL_CIPHER}x %a \"%r\" %>s %L %{forensic-id}n"' }}
              LogLevel warn

              BrowserMatch "MSIE [2-5]" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0

              <If "%{HTTP:Range} == 'bytes=0-'">
                # Remove the range header if requesting the whole file so that the response will
                # still be cached.
                RequestHeader unset Range
              </If>
              <Elseif "-n %{HTTP:Range}">
                # To prevent davrods from crashing, tell it not to cache partial responses
                # When varnish-cache is configured, this should be commented out for caching
                # RequestHeader merge Cache-Control no-store
              </Elseif>

              ProxyPass / http://127.0.0.1:{{ _webdav_varnish_service_port }}/ retry=0 timeout=300
              ProxyHTMLURLMap ^http: https: [R]

              Header edit Location ^http: https:
              Header merge Cache-Control public

              # Disable cache when varnish-cache is configured
              CacheDisable /

              ExpiresActive On

              <Files ~ "\.(cgi|shtml|phtml|php3?)$">
                SSLOptions +StdEnvVars
              </Files>

              <Directory "/var/www/cgi-bin">
                SSLOptions +StdEnvVars
              </Directory>
            comment: This proxy handles TLS, corrects requests, enables caching, and anonymous access for XMLHttpRequests
        apache_vhosts_template: ../../templates/webdav/etc/httpd/conf.d/vhosts.conf.j2
      tags:
        - no_testing

  pre_tasks:
    - name: enable notifcations when not testing
      set_fact:
        notifications_enabled: true
      tags:
        - no_testing

    - name: package_facts uses auto, setup for next task
      package_facts:

    - name: install mod_proxy_html
      package:
        name: mod_proxy_html

    - name: build & install mod_ssl-rm_ssl_conf RPM package to remove ssl.conf
      include_tasks: tasks/install_rm_sslconf_rpm.yml
      when: "'mod_ssl-rm_ssl_conf' not in ansible_facts.packages"

    - name: install mod_ssl
      package:
        name: mod_ssl

    - include_tasks: tasks/install_irods_pkg.yml
      vars:
        os: centos{{ ansible_distribution_major_version }}
        pkg: irods-icommands
        pkg_ver: "{{ _irods_version }}"

    - include_tasks: tasks/install_irods_pkg.yml
      vars:
        os: centos{{ ansible_distribution_major_version }}
        pkg: irods-runtime
        pkg_ver: "{{ _irods_version }}"

    - name: install davrods
      yum:
        name: https://github.com/UtrechtUniversity/davrods/releases/download/4.1_1.4.1/davrods-4.1_1.4.1-1.el7.centos.x86_64.rpm

    - include_role:
        name: cyverse.irods-cfg
        tasks_from: client.yml
      vars:
        irods_cfg_environment_file: etc/httpd/irods/irods_environment.json
        irods_cfg_chown: false
        irods_cfg_host: "{{ _irods_ies }}"
        irods_cfg_zone_name: "{{ _irods_zone_name }}"
        irods_cfg_zone_user: anonymous
        irods_cfg_home: /{{ _irods_zone_name }}

    - include_tasks: tasks/mk_webdav_dir_head.yml
      vars:
        head_dav_base: "{{ _irods_zone_name }}/{{ item.base }}"
        head_file: "{{ item.file }}"
      with_items:
        - file: home-head.html
          base: home
        - file: projects-head.html
          base: projects
        - file: community-head.html
          base: commons/community_released
        - file: curated-head.html
          base: commons/cyverse_curated

    - include_tasks: tasks/install_webdav_html.yml
      vars:
        svc: dav

    - include_tasks: tasks/install_webdav_html.yml
      vars:
        svc: dav-anon

    - name: add root web page
      copy:
        src: files/webdav/index.html
        dest: /var/www/html/index.html

    - name: update apache mpm
      template:
        src: "templates/webdav/etc/httpd/conf.modules.d/{{ item }}.j2"
        dest: "/etc/httpd/conf.modules.d/{{ item }}"
      with_items:
        - 00-mpm.conf
      notify:
        - restart httpd

    - name: install mod_qos
      package:
        name: mod_qos

    - name: update apache modules
      template:
        src: "templates/webdav/etc/httpd/conf.modules.d/{{ item }}.j2"
        dest: "/etc/httpd/conf.modules.d/{{ item }}"
      with_items:
        - 00-status.conf
        - 10-mod_qos.conf
      notify:
        - restart httpd

    - when: >
        'varnish' in ansible_facts.packages
        and ansible_facts.packages['varnish'][0].version is version_compare('6.5.1', '<')
      block:
        - name: ensure varnish not running
          service:
            name: varnish
            state: stopped

        - name: uninstall pre-installed varnish-cache package
          package:
            name: varnish
            state: absent

        - name: delete stale varnish-cache service file
          file:
            path: /etc/systemd/system/varnish.service
            state: absent
          notify: reload systemd

        - name: delete stale varnish-cache log files (without this, varnishncsa may crash)
          file:
            path: /var/log/varnish/
            state: absent

        - name: find files in varnish cache dir
          find:
            paths: "{{ _webdav_cache_dir }}"
          register: cached_files

        - name: delete varnish cache files
          file:
            path: "{{ _webdav_cache_dir }}"
            state: absent
          with_items: "{{ cached_files }}"

    - name: install varnish-cache package (v6.5.1)
      yum:
        name: https://packagecloud.io/varnishcache/varnish65/packages/el/7/varnish-6.5.1-0.0.el7.x86_64.rpm/download.rpm
        state: present

    - name: Create varnish shared memory mount point
      file:
        path: /var/lib/varnish
        state: directory
        mode: 0777

    # Varnish creates in-memory log upto 4GB.
    - name: mount varnish shared memory
      mount:
        path: /var/lib/varnish
        src: tmpfs
        fstype: tmpfs
        opts: rw,nodev,nosuid,size=4G
        state: mounted
      notify:
        - restart varnish
      tags:
        - no_testing

    - name: Create a cache dir
      file:
        path: "{{ _webdav_cache_dir }}"
        recurse: true
        state: directory
        owner: varnish
        group: varnish
        mode: 0755

    - name: Create a log dir
      file:
        path: "/var/log/varnish"
        recurse: true
        state: directory
        owner: varnishlog
        group: varnish
        mode: 0755

    - name: setup varnish-cache VCL
      template:
        src: "templates/webdav/etc/varnish/{{ item }}.j2"
        dest: "/etc/varnish/{{ item }}"
      with_items:
        - default.vcl
      notify:
        - restart varnish
        - restart varnishncsa

    - name: setup varnish-cache service
      template:
        src: "templates/webdav/usr/lib/systemd/system/{{ item }}.j2"
        dest: "/usr/lib/systemd/system/{{ item }}"
      with_items:
        - varnish.service
      notify:
        - reload systemd
        - restart varnish
        - restart varnishncsa

  post_tasks:
    - name: create apache systemd service dependencies directory
      file:
        path: /etc/systemd/system/httpd.service.requires
        recurse: true
        state: directory

    - name: ensure varnish runs when apache run
      file:
        path: /etc/systemd/system/httpd.service.requires/varnish.service
        src: /usr/lib/systemd/system/varnish.service
        state: link

    - name: ensure varnishncsa runs when apache run
      file:
        path: /etc/systemd/system/httpd.service.requires/varnishncsa.service
        src: /usr/lib/systemd/system/varnishncsa.service
        state: link

    - name: open HTTP connection in firewall
      blockinfile:
        path: /etc/sysconfig/iptables
        insertbefore: -A INPUT -j REJECT
        marker: "# {mark} DS MANAGED BLOCK (webdav)"
        content: |
          {% for i in _webdav_allowed_src %}
          -A INPUT -m state --state NEW -p tcp -s {{ i }} --dport 80 -j ACCEPT
          -A INPUT -m state --state NEW -p tcp -s {{ i }} --dport 443 -j ACCEPT
          {% endfor %}
      notify: restart firewall

  handlers:
    - name: restart firewall
      when: notifications_enabled | default(false)
      service:
        name: iptables
        state: restarted

    - name: reload systemd
      when: notifications_enabled | default(false)
      systemd:
        daemon_reload: yes

    - name: restart httpd
      when: notifications_enabled | default(false)
      service:
        name: httpd
        state: restarted

    - name: restart varnish
      when: notifications_enabled | default(false)
      service:
        name: varnish
        state: restarted

    - name: restart varnishncsa
      when: notifications_enabled | default(false)
      service:
        name: varnishncsa
        state: restarted
